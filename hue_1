from phue import Bridge
from datetime import datetime, timedelta
import time
import datetime
import ephem
import pytz
import logging

BRIDGE_IP = "192.168.178.34"

b = Bridge(BRIDGE_IP)
b.connect()
b.get_api()

sen = b.get_sensor_objects("name")
light_names = b.get_light_objects("name")
lights = b.lights


Dummy = ["Elena/Deckelampe"
		]
Olli = [
        "Olli/Sony TV/Links/Hue Play",
        "Olli/Sony TV/Rechts/Hue Play",
        "Olli/Regal/Hue Go",
        "Olli/Schreibtisch/Hue Go",
        "Olli/Decke 1/Hue color"
        ]
outside = [
        "Draußen/Terrasse/Tür/Ost",
        "Draußen/Terrasse/L/Ost",
        "Draußen/Terrasse/R/Ost",
        "Draußen/Küche/L/Nord",
        "Draußen/Küche/R/Nord",
        "Draußen/Haustür/West",
        "Draußen/Carport/Vorne 1/",
        "Draußen/Carport/Vorne 2/",
        "Draußen/Auffahrt/Außen/1",
        "Draußen/Auffahrt/Außen/2",
        "Draußen/Auffahrt/Innen/1",
        "Draußen/Auffahrt/Innen/2",
        "Draußen/Auffahrt/Innen/3",
        "Draußen/Auffahrt/Innen/4"
        ]
zone_daymode = [
        "Draußen/Terrasse/Tür/Ost",
        "Draußen/Terrasse/L/Ost",
        "Draußen/Terrasse/R/Ost",
        "Draußen/Küche/L/Nord",
        "Draußen/Küche/R/Nord",
        "Draußen/Haustür/West",
        "Draußen/Carport/Vorne 1/",
        "Draußen/Carport/Vorne 2/",
        "Bibliothek/Hue white spot/R",
        "Bibliothek/Hue white spot/L",
        "Zwischenraum/Schrank/lightstrip",
        "Flur/Haustür/Tisch/Hue white",
        "Draußen/Auffahrt/Außen/1",
        "Draußen/Auffahrt/Außen/2",
        "Draußen/Auffahrt/Innen/1",
        "Draußen/Auffahrt/Innen/2",
        "Draußen/Auffahrt/Innen/3",
        "Draußen/Auffahrt/Innen/4"
        ]
zone_nightmode = [
        "Bibliothek/Hue white spot/R",
        "Bibliothek/Hue white spot/L",
        "Zwischenraum/Schrank/lightstrip",
        "Flur/Haustür/Tisch/Hue white",
        "Flur/Olli/Decke/"
        ]
zone_outside = [
        "Draußen/Terrasse/Tür/Ost",
        "Draußen/Terrasse/L/Ost",
        "Draußen/Terrasse/R/Ost",
        "Draußen/Küche/L/Nord",
        "Draußen/Küche/R/Nord",
        "Draußen/Haustür/West",
        "Draußen/Carport/Vorne 1/",
        "Draußen/Carport/Vorne 2/"
        ]
zone_runway = [
		"Draußen/Auffahrt/Innen/1",
		"Draußen/Auffahrt/Innen/2",
        "Draußen/Auffahrt/Außen/1",
        "Draußen/Auffahrt/Innen/3",
        "Draußen/Auffahrt/Außen/2",
        "Draußen/Auffahrt/Innen/4",
        "Draußen/Carport/Vorne 1/",
        "Draußen/Carport/Vorne 2/"
        ]
zone_cominghome = [
        "Draußen/Terrasse/Tür/Ost",
        "Draußen/Terrasse/L/Ost",
        "Draußen/Terrasse/R/Ost",
        "Draußen/Küche/L/Nord",
        "Draußen/Küche/R/Nord",
        "Draußen/Haustür/West",
        "Draußen/Carport/Vorne 1/",
        "Draußen/Carport/Vorne 2/",
        "Olli/Sony TV/Links/Hue Play",
        "Olli/Sony TV/Rechts/Hue Play"               
        ]
zone_waylight = [
		"Bibliothek/Hue white spot/R",
		"Bibliothek/Hue white spot/L",
		"Zwischenraum/Schrank/lightstrip",
		"Flur/Haustür/Tisch/Hue white"
		]



Pfad = '/home/oliver/Dokumente/autostart/outside.log'
#'/home/oliver/Desktop/autostart/outside.log'
#/home/olli/Schreibtisch/SAP/hue/daly/outside/outside.log
logging.basicConfig(filename=Pfad, level=logging.INFO, format='%(asctime)s %(message)s')


def sunrise():
    # Geografische Koordinaten für den gewünschten Standort
    latitude = 53.595283
    longitude = 7.340012

    # Datum und Zeitzone für die Berechnung des Sonnenaufgangs
    date = datetime.date.today()
    timezone = pytz.timezone('Europe/Berlin')

    # Berechnung der Uhrzeit für den Sonnenaufgang
    obs = ephem.Observer()
    obs.lat = str(latitude)
    obs.lon = str(longitude)
    obs.date = date.strftime('%Y/%m/%d')
    sun = ephem.Sun()
    sunrise = obs.next_rising(sun)

    # Konvertierung des Sonnenaufgangs in die lokale Zeitzone
    sunrise = pytz.utc.localize(sunrise.datetime()).astimezone(timezone)

    # Formatierung des Sonnenaufgangs
    formatted_sunrise_time = sunrise.strftime('%H:%M:%S')
    return formatted_sunrise_time



def sunset():
        # Geografische Koordinaten für den gewünschten Standort
        latitude = 53.595283
        longitude = 7.340012 

        # Datum und Zeitzone für die Berechnung des Sonnenuntergangs
        date = datetime.date.today()
        timezone = pytz.timezone('Europe/Berlin')

        # Berechnung der Uhrzeit für den Sonnenuntergang
        obs = ephem.Observer()
        obs.lat = str(latitude)
        obs.lon = str(longitude)
        obs.date = date.strftime('%Y/%m/%d')
        sun = ephem.Sun()
        sunset = obs.next_setting(sun)

        # Konvertierung der Sonnenuntergangszeit in die lokale Zeitzone
        sunset = pytz.utc.localize(sunset.datetime()).astimezone(timezone)

        # Formatierung der Sonnenuntergangszeit
        formatted_sunset_time = sunset.strftime('%H:%M:%S')
        return formatted_sunset_time





def check_lamp_state(delta_time, lamp_array, time_check):
    current_datetime = datetime.datetime.now()
    
    time_check = current_datetime + delta_time
    true_lamps = []
    print("AH")
    for online in lamp_array:
        on_state = b.get_light(online, 'on')
        if on_state:
            true_lamps.append(online)

    return true_lamps, time_check

TIME_INTERVAL_SECONDS = 10

def main_function():
    delta_time = datetime.timedelta(seconds=TIME_INTERVAL_SECONDS)
    time_check = datetime.datetime.now() + delta_time
    true_lamps = []

    while True:
        current_time = datetime.datetime.now()

        if current_time.time() > time_check.time():
            true_lamps, time_check = check_lamp_state(delta_time, zone_nightmode, time_check)
        time.sleep(2)
        print("True Lamps:", true_lamps)
        print("Time Check:", time_check, "Time now", datetime.datetime.now())

if __name__ == "__main__":
    main_function()

